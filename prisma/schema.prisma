generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model View {
  id              String   @id @default(cuid())
  tableId         String
  name            String
  filters         Filter[]
  sorts           Sort[]
  columnVisibility Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  table       Table         @relation("TableViews", fields: [tableId], references: [id], onDelete: Cascade)
  ColumnOrder ColumnOrder[]

  @@index([tableId])
  @@index([id])
}

model Base {
  id        String   @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tables Table[]

  @@index([userId])
  @@index([id])
}

model Table {
  id        String   @id @default(cuid())
  baseId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  base    Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  columns Column[]
  rows    Row[]
  views   View[]   @relation("TableViews")

  @@index([baseId])
  @@index([id])
}

model Column {
  id        String     @id @default(cuid())
  tableId   String
  name      String
  type      ColumnType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  table       Table         @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells       Cell[]
  Filter      Filter[]
  Sort        Sort[]
  ColumnOrder ColumnOrder[]

  @@index([tableId])
  @@index([id])
}

enum ColumnType {
  Text
  Number
}

model Row {
  id        String   @id @default(cuid())
  tableId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  table Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells Cell[]

  @@index([tableId])
  @@index([id])
}

model Cell {
  id          String   @id @default(cuid())
  rowId       String
  columnId    String
  valueText   String?
  valueNumber Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  row    Row    @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column Column @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@index([rowId])
  @@index([columnId])
  @@index([valueText])
  @@index([valueNumber])
  @@index([id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Filter {
  id        String         @id @default(cuid())
  viewId    String
  columnId  String
  operator  FilterOperator
  value     String? // Store number values as strings, we'll parse them in the application
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  view   View   @relation(fields: [viewId], references: [id], onDelete: Cascade)
  column Column @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@index([viewId])
  @@index([columnId])
}

model Sort {
  id        String        @id @default(cuid())
  viewId    String
  columnId  String
  direction SortDirection
  order     Int // To maintain multiple sort order (first sort by X, then by Y)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  view   View   @relation(fields: [viewId], references: [id], onDelete: Cascade)
  column Column @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@index([viewId])
  @@index([columnId])
}

enum FilterOperator {
  GreaterThan
  SmallerThan
  IsEmpty
  IsNotEmpty
  Equals
  Contains
}

enum SortDirection {
  Ascending
  Descending
}

model ColumnOrder {
  id        String   @id @default(cuid())
  viewId    String
  columnId  String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  view   View   @relation(fields: [viewId], references: [id], onDelete: Cascade)
  column Column @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@unique([viewId, columnId])
  @@index([viewId])
  @@index([columnId])
}
