generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  bases         Base[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Base {
  id        String   @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tables    Table[]

  @@index([userId])
}

model Table {
  id        String   @id @default(cuid())
  baseId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  base      Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  columns   Column[]
  rows      Row[]

  @@index([baseId])
}

model Column {
  id        String     @id @default(cuid())
  tableId   String
  name      String
  type      ColumnType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  table     Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells     Cell[]

  @@index([tableId])
}

enum ColumnType {
  Text
  Number
}

model Row {
  id        String   @id @default(cuid())
  tableId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells     Cell[]

  @@index([tableId])
}

model Cell {
  id          String   @id @default(cuid())
  rowId       String
  columnId    String
  valueText   String?
  valueNumber Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  row         Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@index([rowId])
  @@index([columnId])
  @@index([valueText])
  @@index([valueNumber])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
